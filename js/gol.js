!function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=6)}([function(e,t,i){"use strict";function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(t,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.model=t,this.view=i,this.model.on("init",this.initGrid.bind(this))}var t,i,r;return t=e,(i=[{key:"initGrid",value:function(){var e=this.model.gridSize;this.view.createGrid({size:e})}},{key:"live",value:function(e){var t=e.row,i=e.col;this.model.live({row:t,col:i})}},{key:"die",value:function(e){var t=e.row,i=e.col;this.model.die({row:t,col:i})}},{key:"clearGrid",value:function(){this.model.clearGrid()}},{key:"randomGrid",value:function(){this.model.computeRandomGrid()}},{key:"play",value:function(){this.model.play()}},{key:"pause",value:function(){this.model.pause()}},{key:"setSpeed",value:function(e){this.model.setSpeed(+e)}}])&&n(t.prototype,i),r&&n(t,r),e}();t.default=r},function(e,t,i){"use strict";function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.model=t,this.controller,this.gridSize=t.gridSize,this.cellSize=17,this.init(),this.model.on("clearGrid",this.clearGrid.bind(this)),this.model.on("live",this.live.bind(this)),this.model.on("die",this.die.bind(this)),this.model.on("compute",this.displayUpdatedGrid.bind(this)),this.model.on("play",this.play.bind(this)),this.model.on("pause",this.pause.bind(this))}var t,i,r;return t=e,(i=[{key:"init",value:function(){this.gridContainer=document.querySelector("#grid"),this.clearBtn=document.querySelector("#reset-button"),this.randomGridBtn=document.querySelector("#randomize-button"),this.togglePlayBtn=document.querySelector("#play-button"),this.speedRange=document.querySelector("#speed-slider"),this.gridContainer.addEventListener("click",this.handleGridClick.bind(this)),this.clearBtn.addEventListener("click",this.handleClear.bind(this)),this.randomGridBtn.addEventListener("click",this.handleRandomGrid.bind(this)),this.togglePlayBtn.addEventListener("click",this.handleTogglePlayBtnClick.bind(this)),this.speedRange.addEventListener("input",this.handleSpeedChange.bind(this))}},{key:"initController",value:function(e){this.controller=e}},{key:"createGrid",value:function(){var e=new DocumentFragment;this.model.grid.forEachCell(function(t){var i=t.getDOMElement();e.appendChild(i)}),this.gridContainer.appendChild(e),Object.assign(this.gridContainer.style,{width:"".concat(this.gridSize*this.cellSize,"px"),height:"".concat(this.gridSize*this.cellSize,"px"),gridTemplate:"repeat(".concat(this.gridSize,", 1fr) / repeat(").concat(this.gridSize,", 1fr)")})}},{key:"handleGridClick",value:function(e){var t=e.target;if("grid"!==t.id){var i=t.getAttribute("data-row"),n=t.getAttribute("data-col");t.classList.contains("alive")?this.controller.die({row:i,col:n}):this.controller.live({row:i,col:n})}}},{key:"handleClear",value:function(){this.controller.clearGrid()}},{key:"handleRandomGrid",value:function(){this.controller.randomGrid()}},{key:"handleTogglePlayBtnClick",value:function(){this.model.isPlaying?this.controller.pause():this.controller.play()}},{key:"handleSpeedChange",value:function(){var e=this.speedRange.value;this.controller.setSpeed(e)}},{key:"live",value:function(e){var t=e.row,i=e.col;this._getCellElement({row:t,col:i}).classList.add("alive")}},{key:"die",value:function(e){var t=e.row,i=e.col;this._getCellElement({row:t,col:i}).classList.remove("alive")}},{key:"clearGrid",value:function(){Array.prototype.forEach.call(this.gridContainer.children,function(e){return e.classList.remove("alive")})}},{key:"displayUpdatedGrid",value:function(){var e=this;this.model.grid.forEachCell(function(t,i,n){var r=e._getCellElement({row:i,col:n});t.isAlive?r.classList.add("alive"):r.classList.remove("alive")})}},{key:"play",value:function(){this.togglePlayBtn.textContent="pause"}},{key:"pause",value:function(){this.togglePlayBtn.textContent="play_arrow"}},{key:"_getCellElement",value:function(e){var t=e.row,i=e.col;return this.gridContainer.querySelector('[data-row="'.concat(t,'"][data-col="').concat(i,'"]'))}}])&&n(t.prototype,i),r&&n(t,r),e}();t.default=r},function(e,t,i){"use strict";function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=void 0;var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.events={}}var t,i,r;return t=e,(i=[{key:"on",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"emit",value:function(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),n=1;n<t;n++)i[n-1]=arguments[n];this.events[e]&&this.events[e].forEach(function(e){return e.apply(void 0,i)})}}])&&n(t.prototype,i),r&&n(t,r),e}();t.EventEmitter=r},function(e,t,i){"use strict";function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(t){var i=t.row,n=t.col,r=t.isAlive,o=void 0!==r&&r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._row=i,this._col=n,this._isAlive=o}var t,i,r;return t=e,(i=[{key:"live",value:function(){this._isAlive=!0}},{key:"die",value:function(){this._isAlive=!1}},{key:"getDOMElement",value:function(){var e=document.createElement("div");return e.classList.add("grid-cell"),this.isAlive&&e.classList.add("alive"),e.setAttribute("data-row",this.row),e.setAttribute("data-col",this.col),e}},{key:"row",get:function(){return this._row}},{key:"col",get:function(){return this._col}},{key:"isAlive",get:function(){return this._isAlive}}])&&n(t.prototype,i),r&&n(t,r),e}();t.default=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,r=(n=i(3))&&n.__esModule?n:{default:n};function o(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.size=t,this._cells=[],this.init()}var t,i,n;return t=e,(i=[{key:"init",value:function(){for(var e=0;e<this.size;e++){this._cells[e]=[];for(var t=0;t<this.size;t++)this._cells[e][t]=new r.default({row:e,col:t})}}},{key:"forEachCell",value:function(e){for(var t=0;t<this.size;t++)for(var i=0;i<this.size;i++)e(this.cells[t][i],t,i)}},{key:"cells",get:function(){return this._cells}}])&&o(t.prototype,i),n&&o(t,n),e}();t.default=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,r=(n=i(4))&&n.__esModule?n:{default:n},o=i(2);function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var d=function(e){function t(e){var i,n,r,o=e.gridSize,a=void 0===o?36:o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(i=!(r=s(t).call(this))||"object"!==l(r)&&"function"!=typeof r?c(n):r).gridSize=a,i.gameSpeed=100,i.isPlaying=!1,i.grid,i.computeNextGrid=i.computeNextGrid.bind(c(c(i))),i}var i,n,d;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,o.EventEmitter),i=t,(n=[{key:"init",value:function(){this.grid=new r.default(this.gridSize),this.emit("init",this.gridSize)}},{key:"live",value:function(e){var t=e.row,i=e.col;this.grid.cells[t][i].live(),this.emit("live",{row:t,col:i})}},{key:"die",value:function(e){var t=e.row,i=e.col;this.grid.cells[t][i].die(),this.emit("die",{row:t,col:i})}},{key:"clearGrid",value:function(){this.grid.forEachCell(function(e){return e.die()}),this.pause(),this.emit("clearGrid")}},{key:"computeRandomGrid",value:function(){this.clearGrid(),this.grid.forEachCell(function(e){Math.random()<.5&&e.live()}),this.emit("compute")}},{key:"computeNextGrid",value:function(){var e=this,t=new r.default(this.gridSize);this.grid.forEachCell(function(i,n,r){(i.isAlive&&2===e._countAliveNeighbors(i)||3===e._countAliveNeighbors(i))&&t.cells[n][r].live()}),this.grid=t,this.emit("compute")}},{key:"play",value:function(){this.interval=setInterval(this.computeNextGrid,this.gameSpeed),this.isPlaying=!0,this.emit("play")}},{key:"pause",value:function(){clearInterval(this.interval),this.interval=null,this.isPlaying=!1,this.emit("pause")}},{key:"setSpeed",value:function(e){this.gameSpeed=e,this.isPlaying&&(clearInterval(this.interval),this.interval=setInterval(this.computeNextGrid,this.gameSpeed))}},{key:"_countAliveNeighbors",value:function(e){for(var t=e.row,i=e.col,n=0,r=-1;r<=1;r++)if(this.grid.cells[t+r])for(var o=-1;o<=1;o++)0===r&&0===o||this.grid.cells[t+r][i+o]&&this.grid.cells[t+r][i+o].isAlive&&(n+=1);return n}}])&&a(i.prototype,n),d&&a(i,d),t}();t.default=d},function(e,t,i){"use strict";var n=l(i(5)),r=l(i(1)),o=l(i(0));function l(e){return e&&e.__esModule?e:{default:e}}var a=new n.default({gridSize:36}),s=new r.default(a),u=new o.default(a,s);s.initController(u),a.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,